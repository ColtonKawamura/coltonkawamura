<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://coltonkawamura.github.io/coltonkawamura/feed.xml" rel="self" type="application/atom+xml"/><link href="https://coltonkawamura.github.io/coltonkawamura/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-15T18:36:58+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Why is the Sky Blue?</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2025/why-is-sky-blue/" rel="alternate" type="text/html" title="Why is the Sky Blue?"/><published>2025-08-03T21:01:00+00:00</published><updated>2025-08-03T21:01:00+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2025/why-is-sky-blue</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2025/why-is-sky-blue/"><![CDATA[<p>After light from the sun makes its lonely journey to earth, it strikes our upper atmosphere with a spectrum strongest in yellow, red, green, and blue.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/light_spectrum-480.webp 480w,/coltonkawamura/assets/img/light_spectrum-800.webp 800w,/coltonkawamura/assets/img/light_spectrum-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/light_spectrum.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As light moves through the atmosphere, it radiates the nitrogen and oxygen molecules. The electric field component of the electromagnetic radiation pulls the electrons in one direction and pushes the positively charged nuclei to the other. This process creates a tiny induced dipole.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/induced_dipole-480.webp 480w,/coltonkawamura/assets/img/induced_dipole-800.webp 800w,/coltonkawamura/assets/img/induced_dipole-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/induced_dipole.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The light wave continues through the atmosphere and causes the induced dipoles in the atmosphere to oscillate like a cork floating on water as a wave goes by.</p> <p>The difference is that light waves, unlike the water waves which are restricted to moving the cork in one direction, can be polarized in any direction perpendicular to the direction of travel. This is much like tying a rope to a wall on one end and holding the other. You can shake the rope particles in any direction perpendicular to the length of the rope, but not significantly in the longitudinal direction.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/polarized_wave-480.webp 480w,/coltonkawamura/assets/img/polarized_wave-800.webp 800w,/coltonkawamura/assets/img/polarized_wave-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/polarized_wave.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>When dipoles oscillate, they act like tiny transmitting antennas and radiate their own electromagnetic waves. This phenomena hinges on the fact that the charges on either side of the dipoles have their own electric field lines that extend to infinity.</p> <p>When charges oscillate, they are accelerated. Due to this acceleration, the electric fields must change with time as well. But this “disturbance” in the electric field can’t instantly change the electric field everywhere — it’s upper limit is the speed of light.</p> <p>Consequently, as described by Maxwell’s equations, changes in the electric fields over time produce a magnetic field. The new magnetic field produces a new electric field and thus, electromagnetic radiation is emitted from the vibrating particle. For comparison, consider what happens when you drop a pebble into a still pond. The pebble will create a brief disturbance in water causing the water surface to be driven up and down. Waves will emanate away from the disturbance point and transfer energy away. Oscillating dipoles and their radiation act very similarly.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/radiation_movement-480.webp 480w,/coltonkawamura/assets/img/radiation_movement-800.webp 800w,/coltonkawamura/assets/img/radiation_movement-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/radiation_movement.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The dominating color of the multi-frequency radiation from the particle is determined by the most intense color frequency in the spectrum. Since intensity is the amount of power transferred per unit area around the dipole, the Poynting vector S can be used to determine the energy per unit area radiated from the dipole’s induced electric and magnetic fields,</p> \[\mathbf{S} = \frac{1}{\mu_0}\left( \mathbf{E} \times \mathbf{B} \right)\] <p>After averaging the Poynting vector over a complete cycle of oscillation ⟨S⟩, the intensity of the radiation is obtained,</p> \[\langle \mathbf{S} \rangle = \left( \frac{\mu_0 p_0^2 \omega^4}{32 \pi^2 c} \right) \frac{\sin^2 \theta}{r^2} \, \hat{\mathbf{r}}\] <p>Of all the terms in the result, intensity is most dependent on frequency ω . Since the sun’s rays contain a broad range of visible frequencies, they are all radiated. However, the colors with higher frequencies will be radiated more intensely since the ω term dominates. This causes blue and violet colors to be the most visible colors. However, since the sun’s original spectrum is stronger in blue than violet, and for physiological reasons, the hue is interpreted by our brains as blue and white. Leading to the pale blue sky color.</p>]]></content><author><name></name></author><category term="physics"/><category term="teaching"/><summary type="html"><![CDATA[It's not because of gnomes.]]></summary></entry><entry><title type="html">A Visual Guide to the Uncertainty Principle</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2025/visual-guide/" rel="alternate" type="text/html" title="A Visual Guide to the Uncertainty Principle"/><published>2025-08-02T16:40:16+00:00</published><updated>2025-08-02T16:40:16+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2025/visual-guide</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2025/visual-guide/"><![CDATA[<p>The Heisenberg uncertainly principle captures the experimental and theoretical phenomena that you can’t ever really have full information about both a particle’s position and momentum at the same time. To increase certainty in one, you must give up certainty in the other. Quantitatively, it is described as follows,</p> \[\sigma_x \sigma_p \geq \frac{\hbar}{2}\] <p>A dive into Fourier analysis can explain this much more analytically, but for now, let’s stick to these animations.</p> <h1 id="where-is-the-wave-and-whats-its-momentum">Where is the Wave and What’s its Momentum?</h1> <p>In the image below: ask yourself Where is the wave?</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/visualGuide2-480.webp 480w,/coltonkawamura/assets/img/visualGuide2-800.webp 800w,/coltonkawamura/assets/img/visualGuide2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/visualGuide2.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can probably tell with some certainty that the wave is where that hump moving to the right is. Now ask yourself this question What is the wavelength? This question is a little hard to answer since the wavelength is the distance between repeating parts of a wave. But what if we had a longer pulse of a wave?</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/visualGuide1-480.webp 480w,/coltonkawamura/assets/img/visualGuide1-800.webp 800w,/coltonkawamura/assets/img/visualGuide1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/visualGuide1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Here, the wavelength is much easier to determine since the wave repeats itself. But what happened to the position of the wave? It’s smeared across the length of the pulse — it’s more uncertain. We just traded certainty of the wavelength for the uncertainty of its position.</p> <h1 id="momentum-links-to-other-information">Momentum Links to Other Information</h1> <p>So what does this have to do with momentum? On quantum scales, particle’s wave-like behavior dominates. Physicist de Broglie linked particle and wave characteristics together with the constant, called Plank’s constant:</p> \[h = p \lambda\] <h1 id="the-big-picture">The Big Picture</h1> <p>What does this mean for our everyday lives? One of the many examples includes solid-state hard drives, which takes advantage of the phenomena the uncertainty principle models. A fluctuating position of a particle can enable it to move through a barrier that it classically couldn’t. This allows electrons to be stored in space without the use of a capacitor, which allows for the non-volatile flash memory we have in most modern electronics.</p>]]></content><author><name></name></author><category term="physics"/><category term="teaching"/><summary type="html"><![CDATA[Sometimes pictures help.]]></summary></entry><entry><title type="html">When Does Something Become Quantum?</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2025/when-quantum/" rel="alternate" type="text/html" title="When Does Something Become Quantum?"/><published>2025-08-02T16:40:16+00:00</published><updated>2025-08-02T16:40:16+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2025/when-quantum</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2025/when-quantum/"><![CDATA[<p>The line between classical and quantum physics is a blurry line, but one general benchmark is if the wavelength of the particle is at least as large as the characteristic size of the system.</p> <h1 id="temperature-and-wavelength">Temperature and Wavelength</h1> <p>One of quantum theory’s central concepts is that everything has a wavelength associated with it. The reason why we don’t notice the wave-like properties of everyday objects because their momentum are so massive that it makes the particles’ wave unnoticeable.</p> <p>Physicist Louis de Broglie proposed a relation between the momentum and wavelength of particles in 1924. He suggested that as the momentum of a particle gets larger, the wavelength gets smaller. Since momentum is a measure of mass and velocity, the wavelength of particles depends on these properties as well.</p> <h1 id="cooling-down-copper">Cooling Down Copper</h1> <p>In solid copper, as an example, the electron in the outer shell of each atom is loosely bound to the nucleus and shared between atoms within the lattice — so the characteristic distance is the lattice spacing. Since solid copper’s lattice spacing is typically around 3.7 times the diameter of a hydrogen atom, we can calculate the temperature when the valence electron’s de Broglie wavelength becomes as large as the lattice spacing.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/quantum-temperature-1-480.webp 480w,/coltonkawamura/assets/img/quantum-temperature-1-800.webp 800w,/coltonkawamura/assets/img/quantum-temperature-1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/quantum-temperature-1.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As we lower the temperature of solid copper, the electron is considered to be a quantum object at around 87,075 K — that’s pretty hot! For general purposes, we can consider the valence electron in solid copper (and most metals) as always quantum. But what about the nucleus of the atoms? At what temperature would we have to cool the clump of protons and neutrons to see any quantum effects?</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/quantum-temperature-2-480.webp 480w,/coltonkawamura/assets/img/quantum-temperature-2-800.webp 800w,/coltonkawamura/assets/img/quantum-temperature-2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/quantum-temperature-2.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As you can see in the animation, we have to lower the temperature down to .753 K to consider it a quantum system. So unless you cool the system down to nearly absolute zero, then the de Broglie wavelength is still smaller than the characteristic size of the system and, therefore, generally, non-quantum!</p>]]></content><author><name></name></author><category term="physics"/><category term="teaching"/><summary type="html"><![CDATA[Its a hot question]]></summary></entry><entry><title type="html">How to Probably Win at Rock, Paper, Scissors</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2025/rock-paper-scissors/" rel="alternate" type="text/html" title="How to Probably Win at Rock, Paper, Scissors"/><published>2025-08-01T16:40:16+00:00</published><updated>2025-08-01T16:40:16+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2025/rock-paper-scissors</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2025/rock-paper-scissors/"><![CDATA[<p>The internet is riddled with articles about the best strategies for rock, paper, scissors (RPS), and they all generally suggest the same thing. But are these strategies actually effective?</p> <h1 id="the-strategy">The Strategy</h1> <p>I should start by summarizing the applicable parts of the <a href="https://arxiv.org/pdf/1404.5199v1">2014 Chinese study</a> where everyone else got their information. The researchers found that players will throw, on average, a distribution of 36% rocks, 33% papers, and 31% scissors (ignoring the standard deviation). This is slightly different than the Nash equilibrium for RPS, which predicts that the optimal strategy is 1/3 rock, 1/3 paper, and 1/3 scissors. Furthermore, the Chinese study found that if a player lost, they will most likely shift clockwise according to this figure:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/rpsDiag-480.webp 480w,/coltonkawamura/assets/img/rpsDiag-800.webp 800w,/coltonkawamura/assets/img/rpsDiag-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/rpsDiag.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If a player wins or ties, they are significantly more likely to repeat their last action. If you’re armed with these data, you could formulate the following strategy:</p> <ul> <li>Play paper first (since most people throw rock first)</li> <li>If you win: Play what your opponent just lost with.</li> <li>If you lost or tie: Play what was not played last round</li> </ul> <p>This is similar to the other information on the internet. But how effective is this in practice? That’s where computers come in. I armed one bot (let’s call it Roboshambo) with the strategy described above and the other bot (Humans) with the average distribution of participants found in the paper. I then let them duke it out for 1000 iterations through a Monte Carlo simulation of best two-of-three games. Here’s the result:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/rpsRoboWins-480.webp 480w,/coltonkawamura/assets/img/rpsRoboWins-800.webp 800w,/coltonkawamura/assets/img/rpsRoboWins-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/rpsRoboWins.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Roboshambo was able to walk away with a 71% win percentage over the Humans. That’s a big swing in your favor if you use the strategy suggested above. Randomness: The Best Counter-Strategy</p> <p>Let’s take things a little deeper: if you’re playing against someone who you think has some sort of strategy, like the one demonstrated above, but you can’t quite figure out what approach they’ll employ, what’s the best counter-strategy for you? Play 1/3 rock, 1/3 paper, 1/3 scissors, the original Nash equilibrium of RPS. If one player acts completely random, unlike what happens with humans in real life, then the best record their opponent can have, no matter their strategy, is 50%.</p> <p>To demonstrate this, let’s place our bots against each other again; Roboshambo plays with the same strategy as before, while the Humans play according to the Nash equilibrium. For 1000 iterations, the results are:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/coltonkawamura/assets/img/rpsNash-480.webp 480w,/coltonkawamura/assets/img/rpsNash-800.webp 800w,/coltonkawamura/assets/img/rpsNash-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/coltonkawamura/assets/img/rpsNash.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The Monte Carlo simulation places the win ratio to about 50% — precisely what the theory predicts! This magnifies the power of equilibrium in zero-sum games like RPS. So next time you play against a friend who might have a strategy in RPS, it might be best to try to be like our Human bot and play as random as possible. If you don’t think they have a strategy, then go ahead and try out the tactic at the beginning of this article. You might just score a 71% win percentage!</p>]]></content><author><name></name></author><category term="computational"/><category term="computational"/><summary type="html"><![CDATA[Using robots to play RPS]]></summary></entry><entry><title type="html">How to Combine Two Plots in Matlab</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2024/combine-two-figures-matlab/" rel="alternate" type="text/html" title="How to Combine Two Plots in Matlab"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2024/combine-two-figures-matlab</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2024/combine-two-figures-matlab/"><![CDATA[<p>Just replace your two figures for <code class="language-plaintext highlighter-rouge">f1</code> and <code class="language-plaintext highlighter-rouge">f2</code>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% Define the two figure files that are on the MATLAB path
% These are the only <span class="s2">"inputs"</span> to this script
f1 <span class="o">=</span> <span class="s1">'fig1.fig'</span><span class="p">;</span>
f2 <span class="o">=</span> <span class="s1">'fig2.fig'</span><span class="p">;</span>

% Open the figures
fig1 <span class="o">=</span> openfig<span class="o">(</span>f1<span class="o">)</span><span class="p">;</span>
fig2 <span class="o">=</span> openfig<span class="o">(</span>f2<span class="o">)</span><span class="p">;</span>

% get axes handles - this assumes there is only 1 axes per figure!
fig1ax <span class="o">=</span> gca<span class="o">(</span>fig1<span class="o">)</span><span class="p">;</span>
fig2ax <span class="o">=</span> gca<span class="o">(</span>fig2<span class="o">)</span><span class="p">;</span>
leg1 <span class="o">=</span> findobj<span class="o">(</span>fig1,<span class="s1">'Type'</span>,<span class="s1">'legend'</span><span class="o">)</span><span class="p">;</span>
leg2 <span class="o">=</span> findobj<span class="o">(</span>fig2,<span class="s1">'Type'</span>,<span class="s1">'legend'</span><span class="o">)</span><span class="p">;</span>

% Get axis children
fig1axChildren <span class="o">=</span> get<span class="o">(</span>fig1ax,<span class="s1">'Children'</span><span class="o">)</span><span class="p">;</span>
fig2axChildren <span class="o">=</span> get<span class="o">(</span>fig2ax,<span class="s1">'Children'</span><span class="o">)</span><span class="p">;</span>

% Create new fig, copy items from fig 1
% This will maintain <span class="nb">set </span>properties such as color
figFinal <span class="o">=</span> figure<span class="o">()</span><span class="p">;</span>
ax <span class="o">=</span> axes<span class="o">(</span>figFinal<span class="o">)</span><span class="p">;</span>
h1 <span class="o">=</span> copyobj<span class="o">(</span>fig1axChildren, ax<span class="o">)</span><span class="p">;</span>


% Copy items from fig 2
h2 <span class="o">=</span> copyobj<span class="o">(</span>fig2axChildren, ax<span class="o">)</span><span class="p">;</span>
<span class="nb">set</span><span class="o">(</span>gca, <span class="s1">'YScale'</span>, <span class="s1">'log'</span><span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>gca, <span class="s1">'XScale'</span>, <span class="s1">'log'</span><span class="o">)</span>
grid on


% Add legend to same location as the legend <span class="k">in </span>fig2 
% but only include objects with a defined DisplayName
h <span class="o">=</span> <span class="o">[</span>h2<span class="p">;</span>h1]<span class="p">;</span>
hasDisplayName <span class="o">=</span> ~cellfun<span class="o">(</span><span class="s1">'isempty'</span>,get<span class="o">(</span>h,<span class="s1">'DisplayName'</span><span class="o">))</span><span class="p">;</span>
legend<span class="o">(</span>ax, h<span class="o">(</span>hasDisplayName<span class="o">)</span>,<span class="s1">'Location'</span>, leg1.Location, <span class="s1">'Interpreter'</span>, <span class="s1">'Latex'</span><span class="o">)</span>


% Copy axis labels
xlabel<span class="o">(</span>ax, fig2ax.XLabel.String, <span class="s1">'Interpreter'</span>, <span class="s1">'Latex'</span>, <span class="s1">'FontSize'</span>, 20<span class="o">)</span>
ylabel<span class="o">(</span>ax, fig2ax.YLabel.String, <span class="s1">'Interpreter'</span>, <span class="s1">'Latex'</span>, <span class="s1">'FontSize'</span>, 20<span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>get<span class="o">(</span>gca, <span class="s1">'ylabel'</span><span class="o">)</span>, <span class="s1">'rotation'</span>, 0<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="computing"/><category term="matlab"/><summary type="html"><![CDATA[How to Combine Two Figures in Matlab Including all the Data.]]></summary></entry><entry><title type="html">Drag Coefficent in 2D in Matlab</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2024/cfd/" rel="alternate" type="text/html" title="Drag Coefficent in 2D in Matlab"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2024/cfd</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2024/cfd/"><![CDATA[<h1 id="simulating-flow-over-a-cylinder-using-matlab-and-the-lattice-boltzmann-method">Simulating Flow Over a Cylinder Using MATLAB and the Lattice Boltzmann Method</h1> <h2 id="introduction">Introduction</h2> <p>Computational Fluid Dynamics (CFD) is a powerful tool used to analyze fluid flow problems. In this tutorial, we’ll simulate <strong>2D flow past a cylinder</strong> using <strong>MATLAB</strong> and the <strong>Lattice Boltzmann Method (LBM)</strong> to compute the drag coefficient. We’ll also visualize velocity fields and streamline patterns.</p> <hr/> <h2 id="problem-setup">Problem Setup</h2> <p>We’ll analyze the flow past a cylinder with the following parameters:</p> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% Problem Parameters</span>
<span class="n">D</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>            <span class="c1">% Cylinder diameter (m)</span>
<span class="n">U</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>            <span class="c1">% Free-stream velocity (m/s)</span>
<span class="n">rho</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>          <span class="c1">% Fluid density (kg/m^3)</span>
<span class="n">mu</span> <span class="o">=</span> <span class="mf">0.01</span><span class="p">;</span>          <span class="c1">% Dynamic viscosity (Pa.s)</span>
<span class="n">Re</span> <span class="o">=</span> <span class="n">rho</span> <span class="o">*</span> <span class="n">U</span> <span class="o">*</span> <span class="n">D</span> <span class="p">/</span> <span class="n">mu</span><span class="p">;</span> <span class="c1">% Reynolds number</span>

<span class="c1">% Domain size</span>
<span class="n">Lx</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">% Length of domain in x-direction</span>
<span class="n">Ly</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">% Height of domain in y-direction</span>

<span class="nb">fprintf</span><span class="p">(</span><span class="s1">'Reynolds number: %.2f\n'</span><span class="p">,</span> <span class="n">Re</span><span class="p">);</span>
</code></pre></div></div> <p>The Reynolds number provides insight into flow characteristics, helping to determine if the flow is laminar or turbulent.</p> <hr/> <h2 id="mesh-generation">Mesh Generation</h2> <p>We’ll create a rectangular computational domain and place the cylinder at the center:</p> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% Grid resolution</span>
<span class="n">Nx</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span> <span class="c1">% Grid points in x-direction</span>
<span class="n">Ny</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">% Grid points in y-direction</span>

<span class="n">x</span> <span class="o">=</span> <span class="nb">linspace</span><span class="p">(</span><span class="o">-</span><span class="n">Lx</span><span class="p">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">Lx</span><span class="p">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">Nx</span><span class="p">);</span>
<span class="n">y</span> <span class="o">=</span> <span class="nb">linspace</span><span class="p">(</span><span class="o">-</span><span class="n">Ly</span><span class="p">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">Ly</span><span class="p">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">Ny</span><span class="p">);</span>
<span class="p">[</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">]</span> <span class="o">=</span> <span class="nb">meshgrid</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>

<span class="c1">% Define cylinder boundary condition</span>
<span class="p">[</span><span class="n">theta</span><span class="p">,</span> <span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="nb">cart2pol</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
<span class="n">cylinder_mask</span> <span class="o">=</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">/</span><span class="mi">2</span><span class="p">;</span>   <span class="c1">% Creates the surface mask</span>

<span class="c1">% Visualize the mesh</span>
<span class="nb">figure</span><span class="p">;</span>
<span class="nb">contourf</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="nb">double</span><span class="p">(</span><span class="n">cylinder_mask</span><span class="p">),</span> <span class="p">[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">],</span> <span class="s1">'k'</span><span class="p">);</span>
<span class="nb">axis</span> <span class="n">equal</span><span class="p">;</span>
<span class="nb">title</span><span class="p">(</span><span class="s1">'Mesh and Cylinder Location'</span><span class="p">);</span>
<span class="nb">xlabel</span><span class="p">(</span><span class="s1">'X'</span><span class="p">);</span>
<span class="nb">ylabel</span><span class="p">(</span><span class="s1">'Y'</span><span class="p">);</span>
<span class="nb">grid</span> <span class="n">on</span><span class="p">;</span>
</code></pre></div></div> <hr/> <h2 id="solving-the-navier-stokes-equations-using-lattice-boltzmann-method">Solving the Navier-Stokes Equations Using Lattice Boltzmann Method</h2> <p>We’ll now solve the Navier-Stokes equations using the LBM approach with finite difference approximations.</p> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% Initialize velocity and pressure fields</span>
<span class="n">u</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">Ny</span><span class="p">,</span> <span class="n">Nx</span><span class="p">);</span>
<span class="n">v</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">Ny</span><span class="p">,</span> <span class="n">Nx</span><span class="p">);</span>
<span class="n">p</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">Ny</span><span class="p">,</span> <span class="n">Nx</span><span class="p">);</span>

<span class="n">dx</span> <span class="o">=</span> <span class="n">Lx</span> <span class="p">/</span> <span class="p">(</span><span class="n">Nx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="n">dy</span> <span class="o">=</span> <span class="n">Ly</span> <span class="p">/</span> <span class="p">(</span><span class="n">Ny</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
<span class="n">dt</span> <span class="o">=</span> <span class="mf">0.01</span><span class="p">;</span>  <span class="c1">% Time step</span>

<span class="n">maxIter</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
<span class="k">for</span> <span class="n">iter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">maxIter</span>
    <span class="c1">% Compute velocity with central difference scheme</span>
    <span class="n">u_new</span> <span class="o">=</span> <span class="n">u</span> <span class="o">-</span> <span class="n">dt</span> <span class="o">*</span> <span class="p">((</span><span class="n">u</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">])</span> <span class="o">-</span> <span class="n">u</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span> <span class="p">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">dx</span><span class="p">)</span> <span class="k">...</span>
                      <span class="o">+</span> <span class="p">(</span><span class="n">v</span><span class="p">([</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">],</span> <span class="p">:)</span> <span class="o">-</span> <span class="n">v</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">:))</span> <span class="p">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">dy</span><span class="p">))</span> <span class="k">...</span>
            <span class="o">+</span> <span class="n">dt</span> <span class="o">*</span> <span class="n">mu</span> <span class="o">*</span> <span class="p">((</span><span class="n">u</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">])</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">u</span> <span class="o">+</span> <span class="n">u</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span> <span class="p">/</span> <span class="n">dx</span><span class="o">^</span><span class="mi">2</span> <span class="k">...</span>
                      <span class="o">+</span> <span class="p">(</span><span class="n">u</span><span class="p">([</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">],</span> <span class="p">:)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">u</span> <span class="o">+</span> <span class="n">u</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">:))</span> <span class="p">/</span> <span class="n">dy</span><span class="o">^</span><span class="mi">2</span><span class="p">);</span>

    <span class="n">v_new</span> <span class="o">=</span> <span class="n">v</span> <span class="o">-</span> <span class="n">dt</span> <span class="o">*</span> <span class="p">((</span><span class="n">u</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">])</span> <span class="o">-</span> <span class="n">u</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span> <span class="p">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">dx</span><span class="p">)</span> <span class="k">...</span>
                      <span class="o">+</span> <span class="p">(</span><span class="n">v</span><span class="p">([</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">],</span> <span class="p">:)</span> <span class="o">-</span> <span class="n">v</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">:))</span> <span class="p">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">dy</span><span class="p">))</span> <span class="k">...</span>
            <span class="o">+</span> <span class="n">dt</span> <span class="o">*</span> <span class="n">mu</span> <span class="o">*</span> <span class="p">((</span><span class="n">v</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">])</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">v</span> <span class="o">+</span> <span class="n">v</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span> <span class="p">/</span> <span class="n">dx</span><span class="o">^</span><span class="mi">2</span> <span class="k">...</span>
                      <span class="o">+</span> <span class="p">(</span><span class="n">v</span><span class="p">([</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">],</span> <span class="p">:)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">v</span> <span class="o">+</span> <span class="n">v</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">:))</span> <span class="p">/</span> <span class="n">dy</span><span class="o">^</span><span class="mi">2</span><span class="p">);</span>

    <span class="c1">% Apply boundary conditions</span>
    <span class="n">u_new</span><span class="p">(:,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">U</span><span class="p">;</span>  
    <span class="n">u_new</span><span class="p">(:,</span> <span class="k">end</span><span class="p">)</span> <span class="o">=</span> <span class="n">u_new</span><span class="p">(:,</span> <span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> 
    <span class="n">v_new</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="k">end</span><span class="p">])</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

    <span class="c1">% No-slip condition at cylinder</span>
    <span class="n">u_new</span><span class="p">(</span><span class="n">cylinder_mask</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">v_new</span><span class="p">(</span><span class="n">cylinder_mask</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">% Pressure correction using central difference</span>
    <span class="n">p_new</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">dt</span> <span class="o">*</span> <span class="n">rho</span> <span class="o">*</span> <span class="p">((</span><span class="n">p</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">])</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">p</span><span class="p">(:,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span> <span class="p">/</span> <span class="n">dx</span><span class="o">^</span><span class="mi">2</span> <span class="k">...</span>
                          <span class="o">+</span> <span class="p">(</span><span class="n">p</span><span class="p">([</span><span class="mi">2</span><span class="p">:</span><span class="k">end</span><span class="p">,</span> <span class="k">end</span><span class="p">],</span> <span class="p">:)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">p</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">:))</span> <span class="p">/</span> <span class="n">dy</span><span class="o">^</span><span class="mi">2</span><span class="p">);</span>

    <span class="c1">% Update fields</span>
    <span class="n">u</span> <span class="o">=</span> <span class="n">u_new</span><span class="p">;</span>
    <span class="n">v</span> <span class="o">=</span> <span class="n">v_new</span><span class="p">;</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">p_new</span><span class="p">;</span>

    <span class="c1">% Monitor convergence</span>
    <span class="k">if</span> <span class="nb">mod</span><span class="p">(</span><span class="n">iter</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
        <span class="nb">fprintf</span><span class="p">(</span><span class="s1">'Iteration %d\n'</span><span class="p">,</span> <span class="n">iter</span><span class="p">);</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div> <hr/> <h2 id="drag-coefficient-calculation">Drag Coefficient Calculation</h2> <p>We’ll now compute the drag force and determine the drag coefficient:</p> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% Compute drag force components</span>
<span class="n">fx</span> <span class="o">=</span> <span class="o">-</span><span class="nb">trapz</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">(:,</span> <span class="nb">round</span><span class="p">(</span><span class="n">Nx</span><span class="p">/</span><span class="mi">2</span><span class="p">)));</span>  <span class="c1">% Pressure force contribution</span>
<span class="n">tau_wall</span> <span class="o">=</span> <span class="n">mu</span> <span class="o">*</span> <span class="p">(</span><span class="n">u</span><span class="p">(:,</span> <span class="nb">round</span><span class="p">(</span><span class="n">Nx</span><span class="p">/</span><span class="mi">2</span><span class="p">))</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="p">/</span> <span class="n">dx</span><span class="p">;</span> <span class="c1">% Shear stress at the wall</span>
<span class="n">fv</span> <span class="o">=</span> <span class="nb">trapz</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">tau_wall</span><span class="p">);</span>  <span class="c1">% Viscous force contribution</span>

<span class="c1">% Total drag force</span>
<span class="n">Fd</span> <span class="o">=</span> <span class="n">fx</span> <span class="o">+</span> <span class="n">fv</span><span class="p">;</span>

<span class="c1">% Drag coefficient calculation</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">D</span><span class="p">;</span> <span class="c1">% Projected area for 2D cylinder</span>
<span class="n">Cd</span> <span class="o">=</span> <span class="n">Fd</span> <span class="p">/</span> <span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">rho</span> <span class="o">*</span> <span class="n">U</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="n">A</span><span class="p">);</span>

<span class="nb">fprintf</span><span class="p">(</span><span class="s1">'Drag Coefficient (Cd): %.4f\n'</span><span class="p">,</span> <span class="n">Cd</span><span class="p">);</span>
</code></pre></div></div> <hr/> <h2 id="post-processing-and-visualization">Post Processing and Visualization</h2> <p>Finally, we’ll visualize the results with velocity magnitude contours and streamlines.</p> <h3 id="velocity-contour-plot">Velocity Contour Plot</h3> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">figure</span><span class="p">;</span>
<span class="nb">contourf</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="nb">sqrt</span><span class="p">(</span><span class="n">u</span><span class="o">.^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">v</span><span class="o">.^</span><span class="mi">2</span><span class="p">),</span> <span class="mi">20</span><span class="p">);</span>
<span class="nb">colorbar</span><span class="p">;</span>
<span class="nb">title</span><span class="p">(</span><span class="s1">'Velocity Magnitude Contour'</span><span class="p">);</span>
<span class="nb">xlabel</span><span class="p">(</span><span class="s1">'X'</span><span class="p">);</span>
<span class="nb">ylabel</span><span class="p">(</span><span class="s1">'Y'</span><span class="p">);</span>
<span class="nb">axis</span> <span class="n">equal</span><span class="p">;</span>
</code></pre></div></div> <h3 id="streamline-plot">Streamline Plot</h3> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">figure</span><span class="p">;</span>
<span class="nb">quiver</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
<span class="nb">title</span><span class="p">(</span><span class="s1">'Velocity Field'</span><span class="p">);</span>
<span class="nb">xlabel</span><span class="p">(</span><span class="s1">'X'</span><span class="p">);</span>
<span class="nb">ylabel</span><span class="p">(</span><span class="s1">'Y'</span><span class="p">);</span>
<span class="nb">axis</span> <span class="n">equal</span><span class="p">;</span>
</code></pre></div></div> <hr/> <h2 id="results-and-comparison">Results and Comparison</h2> <p>For low Reynolds numbers, the analytical drag coefficient for a 2D cylinder is:</p> <p>[ C_d = \frac{8\pi}{\text{Re}} ]</p> <p>Let’s compare our computed drag coefficient with the analytical value:</p> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Cd_analytical</span> <span class="o">=</span> <span class="mi">8</span> <span class="o">*</span> <span class="nb">pi</span> <span class="p">/</span> <span class="n">Re</span><span class="p">;</span>
<span class="nb">fprintf</span><span class="p">(</span><span class="s1">'Analytical Drag Coefficient: %.4f\n'</span><span class="p">,</span> <span class="n">Cd_analytical</span><span class="p">);</span>
<span class="nb">fprintf</span><span class="p">(</span><span class="s1">'Error: %.2f%%\n'</span><span class="p">,</span> <span class="nb">abs</span><span class="p">(</span><span class="n">Cd</span> <span class="o">-</span> <span class="n">Cd_analytical</span><span class="p">)</span> <span class="p">/</span> <span class="n">Cd_analytical</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
</code></pre></div></div> <h2 id="further-improvements">Further Improvements</h2> <p>To enhance this model, consider:</p> <ul> <li>Refining the grid resolution for better accuracy.</li> <li>Implementing higher-order numerical schemes.</li> <li>Extending to 3D simulations.</li> </ul> <hr/> <p>I hope you found this tutorial helpful. Feel free to try it out and experiment with different parameters!</p>]]></content><author><name></name></author><category term="computational"/><category term="dynamics"/><summary type="html"><![CDATA[Simulating Flow Over a Cylinder Using MATLAB and the Lattice Boltzmann Methoe]]></summary></entry><entry><title type="html">Integral Table</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2023/integral-table/" rel="alternate" type="text/html" title="Integral Table"/><published>2023-04-24T16:40:16+00:00</published><updated>2023-04-24T16:40:16+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2023/integral-table</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2023/integral-table/"><![CDATA[\[\int A x^2 \sin^2(kx) \, dx = \frac{A}{6} x^3 - \frac{A}{4k^2} x^2 \sin(2kx) - \frac{A}{4k^3} x \cos(2kx) + \frac{A}{8k^3} \sin(2kx) + C.\] <p><strong>Definite Integrals</strong></p> \[\int_0^\pi \cos^2(x) \, dx = \frac{\pi}{2}\] <p>The area under \(\cos\) and \(\cos^2\) is \(\pi\) times the amplitude. Since our amplitude is only \(1\) and the range is only have of a full cycle, the area under is \(\pi/2\). So for a full cycle, it should be twice a half-cycle, or \(\pi\), so,</p> \[\int_0^{2\pi} \cos^2(x) \, dx=\pi.\]]]></content><author><name></name></author><category term="math"/><category term="integrals"/><summary type="html"><![CDATA[Integrals that I look up way too often.]]></summary></entry><entry><title type="html">Classical Mechanics References</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2023/classical-mechanics-references/" rel="alternate" type="text/html" title="Classical Mechanics References"/><published>2023-03-20T18:37:00+00:00</published><updated>2023-03-20T18:37:00+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2023/classical-mechanics-references</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2023/classical-mechanics-references/"><![CDATA[<h3 id="lagrangian">Lagrangian</h3> \[\frac{d}{dt} \left( \frac{\partial L}{\partial \dot{q}_j} \right) = \frac{\partial L}{\partial q_j}\] <p>which is just newton’s second law</p> \[m \ddot{q}_j= -\nabla U(q)\]]]></content><author><name></name></author><category term="physics"/><category term="classical"/><summary type="html"><![CDATA[My most used classical mechanics references.]]></summary></entry><entry><title type="html">Matrix Operations</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2023/matrix-operations/" rel="alternate" type="text/html" title="Matrix Operations"/><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2023/matrix-operations</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2023/matrix-operations/"><![CDATA[<h2 id="cross-product-of-two-vectors">Cross Product of Two Vectors</h2> <p>Given two vectors:</p> \[\mathbf{A} = \begin{bmatrix} a \\ b \\ c \end{bmatrix}, \quad \mathbf{B} = \begin{bmatrix} d \\ e \\ f \end{bmatrix}\] <p>The cross product $\mathbf{A} \times \mathbf{B}$ is given by the determinant of a 3x3 matrix:</p> \[\mathbf{A} \times \mathbf{B} = \begin{vmatrix} \hat{i} &amp; \hat{j} &amp; \hat{k} \\ a &amp; b &amp; c \\ d &amp; e &amp; f \end{vmatrix}\] <h3 id="components">Components:</h3> <ul> <li> <p><strong>X-component</strong>: \(\hat{i} \cdot \begin{vmatrix} b &amp; c \\ e &amp; f \end{vmatrix} = bf - ce\)</p> </li> <li> <p><strong>Y-component</strong>: \(-\hat{j} \cdot \begin{vmatrix} a &amp; c \\ d &amp; f \end{vmatrix} = -(af - cd)\)</p> </li> <li> <p><strong>Z-component</strong>: \(\hat{k} \cdot \begin{vmatrix} a &amp; b \\ d &amp; e \end{vmatrix} = ae - bd\)</p> </li> </ul> <h3 id="resulting-vector">Resulting Vector:</h3> \[\mathbf{A} \times \mathbf{B} = \left( bf - ce, -(af - cd), ae - bd \right)\] <h2 id="determinant">Determinant</h2> \[A = \begin{bmatrix} a &amp; b &amp; c \\ d &amp; e &amp; f \\ g &amp; h &amp; i \end{bmatrix}\] \[\text{det}(A) = a(ei - fh) - b(di - fg) + c(dh - eg)\]]]></content><author><name></name></author><category term="math"/><category term="matrix"/><summary type="html"><![CDATA[A references for matrix operations that I use often.]]></summary></entry><entry><title type="html">Electrodynamics References</title><link href="https://coltonkawamura.github.io/coltonkawamura/blog/2022/electrodynamics-references/" rel="alternate" type="text/html" title="Electrodynamics References"/><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>https://coltonkawamura.github.io/coltonkawamura/blog/2022/electrodynamics-references</id><content type="html" xml:base="https://coltonkawamura.github.io/coltonkawamura/blog/2022/electrodynamics-references/"><![CDATA[<h2 id="maxwells-equations">Maxwell’s Equations</h2> <h3 id="in-general">In General:</h3> \[\begin{aligned} \nabla \cdot \mathbf{E} &amp;= \frac{1}{\epsilon_0} \rho \\ \\ \nabla \times \mathbf{E} &amp;= -\frac{\partial \mathbf{B}}{\partial t} \\ \\ \nabla \cdot \mathbf{B} &amp;= 0 \\ \\ \nabla \times \mathbf{B} &amp;= \mu_0 \mathbf{J} + \mu_0 \epsilon_0 \frac{\partial \mathbf{E}}{\partial t} \end{aligned}\] <h3 id="in-matter">In Matter:</h3> \[\begin{aligned} \nabla \cdot \mathbf{D} &amp;= \rho_f \\ \\ \nabla \times \mathbf{E} &amp;= -\frac{\partial \mathbf{B}}{\partial t} \\ \\ \nabla \cdot \mathbf{B} &amp;= 0 \\ \\ \nabla \times \mathbf{H} &amp;= \mathbf{J}_f + \frac{\partial \mathbf{D}}{\partial t} \end{aligned}\] <h2 id="auxillary-fields">Auxillary Fields:</h2> \[\mathbf{D} = \epsilon_0 \mathbf{E} + \mathbf{P}\] \[\mathbf{H} = \frac{1}{\mu_0} \mathbf{B} - \mathbf{M}\] <p>In Linear Media:</p> \[\mathbf{P} = \epsilon_0 \chi_e \mathbf{E}, \quad \mathbf{D} = \epsilon \mathbf{E}\] \[\mathbf{M} = \chi_m \mathbf{H}, \quad \mathbf{H} = \frac{1}{\mu} \mathbf{B}\] <h2 id="potentials">Potentials</h2> \[\mathbf{E} = -\nabla V - \frac{\partial \mathbf{A}}{\partial t}, \quad \mathbf{B} = \nabla \times \mathbf{A}\] <h2 id="lorentz-force-law">Lorentz Force Law</h2> \[\mathbf{F} = q (\mathbf{E} + \mathbf{v} \times \mathbf{B})\] <h2 id="energy-momentum-and-power">Energy, Momentum, and Power</h2> <p>Energy: \(\quad U = \frac{1}{2} \int \left( \epsilon_0 E^2 + \frac{1}{\mu_0} B^2 \right) d\tau\)</p> <p>Momentum: \(\quad \mathbf{P} = \epsilon_0 \int (\mathbf{E} \times \mathbf{B}) \, d\tau\)</p> <p>Poynting Vector (Power per Area): \(\quad \mathbf{S} = \frac{1}{\mu_0} (\mathbf{E} \times \mathbf{B})\)</p> <p>Larmor: \(\quad P = \frac{\mu_0}{6 \pi c} q^2 a^2\)</p>]]></content><author><name></name></author><category term="physics"/><category term="electrodynamics"/><summary type="html"><![CDATA[My most used Electrodynamics references.]]></summary></entry></feed>